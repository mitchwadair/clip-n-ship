{
  "version": 3,
  "sources": ["../src/clipnship.js"],
  "sourcesContent": ["/**\r\n * @license\r\n * Copyright (c) 2021-2022 Mitchell Adair\r\n *\r\n * This software is released under the MIT License.\r\n * https://opensource.org/licenses/MIT\r\n */\r\n\r\nclass ClipConverter {\r\n    /**\r\n     * The ClipConverter constructor\r\n     *\r\n     * @typicalname converter\r\n     * @param {URL} video the video to convert\r\n     * @param {number} outputWidth the width of your output video\r\n     * @param {number} outputHeight the height of your output video\r\n     * @example\r\n     * ```js\r\n     * const video = new Blob([\"file:///path/to/your/video/file.mp4\"], { type: \"video/mp4\" });\r\n     * const videoURL = URL.createObjectURL(video);\r\n     *\r\n     * const converter = new ClipConverter(videoURL);\r\n     * ```\r\n     */\r\n    constructor(video, outputWidth = 1080, outputHeight = 1920) {\r\n        if (!video) {\r\n            throw new Error(\"Must include video data when instantiating a ClipConverter\");\r\n        }\r\n\r\n        this._layers = [];\r\n        this._dimensions = { width: outputWidth, height: outputHeight };\r\n        this._canvas = this._createCanvas();\r\n        this._video = this._createVideo(video);\r\n        this._playInterval;\r\n    }\r\n\r\n    _createCanvas() {\r\n        const { width, height } = this._dimensions;\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.setAttribute(\"id\", \"clipnship-canvas\");\r\n        canvas.setAttribute(\"width\", width);\r\n        canvas.setAttribute(\"height\", height);\r\n        return canvas;\r\n    }\r\n\r\n    _createVideo(video) {\r\n        const videoElement = document.createElement(\"video\");\r\n        videoElement.setAttribute(\"hidden\", \"\");\r\n        videoElement.setAttribute(\"src\", video);\r\n\r\n        videoElement.onplay = () => {\r\n            clearInterval(this._playInterval);\r\n            this._playInterval = setInterval(() => this._drawLayers(), 1000 / 60);\r\n        };\r\n        videoElement.onpause = () => clearInterval(this._playInterval);\r\n        videoElement.onended = () => clearInterval(this._playInterval);\r\n        videoElement.onloadedmetadata = () => (videoElement.currentTime = 0);\r\n        videoElement.onseeked = () => window.requestAnimationFrame(() => this._drawLayers());\r\n\r\n        return videoElement;\r\n    }\r\n\r\n    _calculateRenderValues(scale = 1) {\r\n        const { width, height } = this._dimensions;\r\n        let vWidth, vHeight, diffX, diffY;\r\n        if (width > height) {\r\n            vWidth = diffX = width;\r\n            vHeight = diffY = height;\r\n        } else {\r\n            vWidth = diffX = height;\r\n            vHeight = diffY = width;\r\n        }\r\n        const offsetX = (width - diffX * scale) / 2;\r\n        const offsetY = (height - diffY * scale) / 2;\r\n        return {\r\n            offsetX,\r\n            offsetY,\r\n            width: vWidth * scale,\r\n            height: vHeight * scale,\r\n        };\r\n    }\r\n\r\n    _getFilterString(filter) {\r\n        if (Array.isArray(filter)) {\r\n            return filter.join(\" \");\r\n        }\r\n        return filter;\r\n    }\r\n\r\n    _drawLayers() {\r\n        const ctx = this._canvas.getContext(\"2d\");\r\n        // doing a regular for loop for performance\r\n        for (let i = 0; i < this._layers.length; i++) {\r\n            const { source, scale, filter } = this._layers[i];\r\n            const { offsetX, offsetY, width, height } = this._calculateRenderValues(scale);\r\n            ctx.filter = this._getFilterString(filter);\r\n            ctx.drawImage(source, offsetX, offsetY, width, height);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the canvas element of the clip converter\r\n     *\r\n     * @param {string} width (optional) the width to set the preview canvas to, can be any valid css unit value\r\n     * @returns the canvas of the clip converter\r\n     * @example\r\n     * ```js\r\n     * // get the preview and add it to a container on your page\r\n     * const preview = converter.getPreview();\r\n     * document.getElementById(\"preview-container\").prepend(preview);\r\n     * ```\r\n     */\r\n    getPreview(width = \"500px\") {\r\n        this._canvas.style = `width: ${width}`;\r\n        return this._canvas;\r\n    }\r\n\r\n    /**\r\n     * Add a new layer to the clip converter\r\n     *\r\n     * @param {string} name the name of the layer\r\n     * @param {number} scale the scale to set the layer to\r\n     * @param {string} filter (optional) the filter to apply to the layer. Valid values can be found [here](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter)\r\n     * @returns the updated list of layers\r\n     * @example\r\n     * ```js\r\n     * converter.addLayer(\"my-layer\", 0.8, \"blur(20px)\");\r\n     * ```\r\n     */\r\n    addLayer(name, scale, filter = \"none\") {\r\n        const existing = this.getLayer(name);\r\n        if (existing) {\r\n            throw new Error(`Layer with name \"${name}\" already exists`);\r\n        } else {\r\n            this._layers.push({ name, scale, filter, source: this._video });\r\n            this._drawLayers();\r\n        }\r\n        return this._layers;\r\n    }\r\n\r\n    /**\r\n     * Gets the layer with the given name\r\n     *\r\n     * @param {string} name the name of the layer to get\r\n     * @returns the layer object or undefined if not found\r\n     * @example\r\n     * ```js\r\n     * const layer = converter.getLayer(\"my-layer\");\r\n     * // if using example above, should return:\r\n     * // {\r\n     * //    name: \"my-layer\",\r\n     * //    scale: 0.8,\r\n     * //    filter: \"blur(20px)\",\r\n     * //    video: <video src=\"someblobdata\" hidden/>\r\n     * // }\r\n     * ```\r\n     */\r\n    getLayer(name) {\r\n        return this._layers.find((layer) => layer.name === name);\r\n    }\r\n\r\n    /**\r\n     * Remove a layer from the clip converter\r\n     *\r\n     * @param {string} name the name of the layer to remove\r\n     * @returns the updated list of layers\r\n     * @example\r\n     * ```js\r\n     * converter.removeLayer(\"my-layer\");\r\n     * ```\r\n     */\r\n    removeLayer(name) {\r\n        this._layers = this._layers.filter((layer) => layer.name !== name);\r\n        this._drawLayers();\r\n        return this._layers;\r\n    }\r\n\r\n    /**\r\n     * Get the current list of layers on the clip converter\r\n     *\r\n     * @returns the current list of layers\r\n     * @example\r\n     * ```js\r\n     * const layers = converter.getLayers();\r\n     * ```\r\n     */\r\n    getLayers() {\r\n        return this._layers;\r\n    }\r\n\r\n    /**\r\n     * Updates a layer with a new scale value\r\n     *\r\n     * @param {string} name the name of the layer to change\r\n     * @param {number} scale the scale to set the layer to\r\n     * @returns the updated list of layers\r\n     * @example\r\n     * ```js\r\n     * converter.updateLayerScale(\"my-layer\", 1.2);\r\n     * ```\r\n     */\r\n    updateLayerScale(name, scale) {\r\n        const layer = this.getLayer(name);\r\n        if (layer) {\r\n            layer.scale = scale;\r\n            this._drawLayers();\r\n        } else {\r\n            throw new Error(`Layer with name \"${name}\" not found`);\r\n        }\r\n        return this._layers;\r\n    }\r\n\r\n    /**\r\n     * Updates a layer with a new filter value\r\n     *\r\n     * @param {string} name the name of the layer to change\r\n     * @param {string} filter the filter to set the layer to.  Valid values can be found [here](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter)\r\n     * @returns the updated list of layers\r\n     * @example\r\n     * ```js\r\n     * converter.updateLayerFilter(\"my-layer\", \"none\");\r\n     * ```\r\n     */\r\n    updateLayerFilter(name, filter) {\r\n        const layer = this.getLayer(name);\r\n        if (layer) {\r\n            layer.filter = filter;\r\n            this._drawLayers();\r\n        } else {\r\n            throw new Error(`Layer with name \"${name}\" not found`);\r\n        }\r\n        return this._layers;\r\n    }\r\n\r\n    /**\r\n     * Plays the video on the preview canvas\r\n     * @example\r\n     * ```js\r\n     * converter.previewPlay();\r\n     * ```\r\n     */\r\n    previewPlay() {\r\n        this._video.play();\r\n    }\r\n\r\n    /**\r\n     * Pauses the video on the preview canvas\r\n     * @example\r\n     * ```js\r\n     * converter.previewPause();\r\n     * ```\r\n     */\r\n    previewPause() {\r\n        this._video.pause();\r\n    }\r\n\r\n    /**\r\n     * Resets the video on the preview canvas to the beginning\r\n     * @example\r\n     * ```js\r\n     * converter.previewReset();\r\n     * ```\r\n     */\r\n    previewReset() {\r\n        this.previewPause();\r\n        this._video.currentTime = 0;\r\n    }\r\n\r\n    /**\r\n     * The callback function for when the renderer completes rendering a clip\r\n     *\r\n     * @callback ClipConverter~onFinishCallback\r\n     * @param {blob} data the data blob for the video, this is of type \"video/webm;codecs=vp9\"\r\n     * @example\r\n     * ```js\r\n     * const onFinish = (data) => {\r\n     *     // we'll assume a \"download\" function like the one here: https://stackoverflow.com/a/54626214\r\n     *     const url = URL.createObjectURL(data);\r\n     *     const downloadBtn = document.getElementById(\"download-btn\");\r\n     *     downloadBtn.onclick = () => download(url, \"my_clip.webm\");\r\n     * }\r\n     * ```\r\n     */\r\n\r\n    /**\r\n     * The callback function for when the renderer updates with progress made\r\n     *\r\n     * @callback ClipConverter~onProgressCallback\r\n     * @param {number} percent the percentage (between 0 and 1) complete the renderer currently is\r\n     * @example\r\n     * ```js\r\n     * const onProgress = (percent) => {\r\n     *     console.log(`Render is ${Math.round(percent * 100)}% done rendering`);\r\n     * }\r\n     * ```\r\n     */\r\n\r\n    /**\r\n     * Render your clip with the given FPS value\r\n     *\r\n     * @param {number} fps the frames per second to render the clip at\r\n     * @param {ClipConverter~onFinishCallback} onFinishCallback a function taking a blob as an argument to call when done rendering\r\n     * @param {ClipConverter~onProgressCallback} onProgressCallback (optional) a function taking a number between 0 and 1, the percent complete, as an argument to call when progressing through the render\r\n     * @example\r\n     * ```js\r\n     * // the function we'll call when rendering is complete\r\n     * const onFinish = (data) => {\r\n     *     // we'll assume a \"download\" function like the one here: https://stackoverflow.com/a/54626214\r\n     *     const url = URL.createObjectURL(data);\r\n     *     const downloadBtn = document.getElementById(\"download-btn\");\r\n     *     downloadBtn.onclick = () => download(url, \"my_clip.webm\");\r\n     * }\r\n     *\r\n     * // the function we'll call when we get a progress update from the renderer\r\n     * const onProgress = (percent) => {\r\n     *     console.log(`Render is ${Math.round(percent * 100)}% done rendering`);\r\n     * }\r\n     *\r\n     * converter.render(60, onFinish, onProgress);\r\n     * ```\r\n     */\r\n    render(fps, onFinishCallback, onProgressCallback = () => {}) {\r\n        const videoStream = this._canvas.captureStream(fps);\r\n        const audioStream = this._video.captureStream(fps);\r\n        const combinedStreams = new MediaStream([...videoStream.getVideoTracks(), ...audioStream.getAudioTracks()]);\r\n        const recorder = new MediaRecorder(combinedStreams, { mimeType: \"video/webm;codecs=vp9\" });\r\n        let outputChunks = [];\r\n\r\n        recorder.ondataavailable = (event) => {\r\n            outputChunks.push(event.data);\r\n            onProgressCallback(this._video.currentTime / this._video.duration);\r\n        };\r\n\r\n        recorder.onstop = () => {\r\n            this._video.volume = 1;\r\n            onFinishCallback(new Blob(outputChunks, { type: \"video/webm;codecs=vp9\" }));\r\n        };\r\n\r\n        this.previewReset();\r\n        this._video.volume = 0.001; // mute for render\r\n        recorder.start(500);\r\n        this._video.play();\r\n        this._video.onended = () => {\r\n            clearInterval(this._playInterval);\r\n            recorder.stop();\r\n        };\r\n    }\r\n}\r\n\r\nexport default ClipConverter;\r\n"],
  "mappings": "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",
  "names": ["clipnship_exports", "__export", "clipnship_default", "ClipConverter", "video", "outputWidth", "outputHeight", "width", "height", "canvas", "videoElement", "scale", "vWidth", "vHeight", "diffX", "diffY", "offsetX", "offsetY", "filter", "ctx", "i", "source", "name", "layer", "fps", "onFinishCallback", "onProgressCallback", "videoStream", "audioStream", "combinedStreams", "recorder", "outputChunks", "event"]
}
